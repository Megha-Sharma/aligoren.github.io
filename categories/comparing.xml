<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Ali GÖREN (comparing)</title><link>http://aligoren.github.io/</link><description></description><atom:link type="application/rss+xml" href="http://aligoren.github.io/categories/comparing.xml" rel="self"></atom:link><language>tr</language><lastBuildDate>Fri, 01 May 2015 19:17:45 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python ile Görsel Karşılaştırma</title><link>http://aligoren.github.io/posts/python-gorsel-karsilastirma.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Görseller ve benzerlikleri daima ilgimi çekmiştir. Nasıl karşılaştırılırlar diye.
Benzerlik algoritmaları (örn: levenshtein) bu yüzden ilgimi çeker.
Görselleri karşılaştırırken bu algoritmalardan yararlanmak nedense aklımın ucundan dahi geçmedi.
Daha çok görselleri byte olarak okuyup bu byte'ları karşılaştırmayı düşündüm.
Python bunun için çeşitli kolaylıklar sağlamakta. Örneğin kendisi hazır built-in fonksiyonlar dahi sunmakta.&lt;/p&gt;
&lt;p&gt;Bu fonksiyonlardan birisi &lt;code&gt;filecmp&lt;/code&gt; modülü. Bu modülün &lt;code&gt;cmp&lt;/code&gt; işlevi bulunmakta. Bu işlev file comparasion işlemi yapmakta.
Yani dosya karşılaştırma işlevi. Örneği şöyle iki adet görsel var elimizde: &lt;/p&gt;&lt;p&gt;&lt;a href="http://aligoren.github.io/posts/python-gorsel-karsilastirma.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>compare</category><category>comparing</category><category>image</category><category>pil</category><category>pillow</category><category>programlama</category><category>python</category><guid>http://aligoren.github.io/posts/python-gorsel-karsilastirma.html</guid><pubDate>Fri, 01 May 2015 17:23:22 GMT</pubDate></item></channel></rss>