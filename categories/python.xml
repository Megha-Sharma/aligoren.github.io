<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ali GÖREN (python)</title><link>http://aligoren.github.io/</link><description></description><atom:link href="http://aligoren.github.io/categories/python.xml" type="application/rss+xml" rel="self"></atom:link><language>tr</language><lastBuildDate>Thu, 30 Apr 2015 22:25:28 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python ve Asyncio</title><link>http://aligoren.github.io/posts/python-ve-asyncio.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Bu yazıda Python'ın bir kütüphanesini tanıtacağım. Aslında varlığından haberdar olsam da araştırmalarım kısa süre önce başladı. Kısa süre önce Guido ile
twitter üzerinden şu sistem nasıl yapılır, bu sistem nasıl yazılır gibi sohbet soru-cevap &lt;a href="https://twitter.com/gvanrossum/status/588112508042502144"&gt;yapıyorduk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O da bana X benzeri bir sistemi yazmak istiyorsan, o konuda X kadar yıl tecrübe edip eksiğini gediğini görmen lazım dedi. Yani onu anlaman lazım dedi.
Eğer onu anlarsam o konuda kendimi geliştirebilirmişim. Daha sonra ise kendisine kendisinin favori kütüphanesinin ne olduğunu sormaya çalıştım
fakat &lt;strong&gt;our&lt;/strong&gt; olarak yazmışım klavye azizliği neyse işte sordum.
Kendisi bana &lt;a href="https://github.com/python/asyncio"&gt;asyncio&lt;/a&gt; kütüphanesini &lt;a href="https://twitter.com/gvanrossum/status/588165930301132800"&gt;önerdi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Daha sonra bu kütüphaneyi araştırmaya başladım. Anladığım kadarını aktarmaya çalışayım. Yanlış bilgilendirmelerim olursa düzeltme gelirse sevirim :)&lt;/p&gt;
&lt;h3&gt;Asenkron Programlama Nedir?&lt;/h3&gt;
&lt;p&gt;Bir uygulama olduğunu düşünün. Bu uygulama aynı anda birden fazla işlem yapmak zorunda. Eğer bu tarz bir uygulamaya sahipseniz asenkron(asynchronous) yani
eşzamansız programlama tam ihtiyacınız olan konu.&lt;/p&gt;
&lt;p&gt;I/O işlemleri yapılırken, tek bir thread, o işlemin sonucunu beklemekle uğraşmaz. Bu esnada başka işler de yapılır.
Paralel programlama ile karıştırılmaması gerekmekte. Çünkü paralel programlama I/O işlemi olup olmadığına bakmaksızın her şey paralel olarak çalıştırır.
Bu durumdan dolayı da paralel yapılması gereken işlemler için fazladan thread gerekir. Eğer işlemci thread sayısına yetecek kadar çekirdeğe sahip değilse
aynı çekirdek daha fazla thread arasında dolaşmak zorunda kalır bu da performansı olumsuz etkiler. &lt;/p&gt;&lt;p&gt;&lt;a href="http://aligoren.github.io/posts/python-ve-asyncio.html"&gt;Devamını oku…&lt;/a&gt; (4 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>asyncio</category><category>network</category><category>programlama</category><category>python</category><guid>http://aligoren.github.io/posts/python-ve-asyncio.html</guid><pubDate>Thu, 30 Apr 2015 20:56:13 GMT</pubDate></item><item><title>sys.argv Yerine Click</title><link>http://aligoren.github.io/posts/sys-argv-yerine-click.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Python ile konsol uygulamaları geliştirirken, konsolda bazen programı direkt olarak çağırmadan parametre kontrolü yapmamız gerekebiliyor. Örneğin şöyle bir çağrı:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;program.py --falan=filan&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Bu program basit ilkel yöntemlerce &lt;code&gt;sys.argv&lt;/code&gt; kontrolü şeklinde yapılmakta. Ancak bunun doğruluğu için dahi uzunca uğraşmak gerekiyor.&lt;/p&gt;
&lt;p&gt;Bu sorunu aşmak için çeşitli kütüphaneler mevcuttur. Örneğin &lt;strong&gt;argparse, docopt&lt;/strong&gt; gibi kütüphaneler de bu soruna kolaylık sağlıyorlar. Ancak bunların yapıları gerçekten çok karmaşık. Örneğin &lt;strong&gt;argparse&lt;/strong&gt; interspersed dediğimiz argümanların devre dışı bırakılmasını desteklemiyor. Bu güvenlik açısından bir sorun oluşturabilir.&lt;/p&gt;
&lt;p&gt;Bu gibi bazı sorunlarla karşılaşmayı önlemek açısından &lt;strong&gt;Click&lt;/strong&gt;, &lt;a href="http://lucumr.pocoo.org/"&gt;Armin Ronacher&lt;/a&gt; tarafından geliştirildi. &lt;/p&gt;&lt;p&gt;&lt;a href="http://aligoren.github.io/posts/sys-argv-yerine-click.html"&gt;Devamını oku…&lt;/a&gt; (2 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>argc</category><category>click</category><category>python</category><category>python3</category><category>sys.argv</category><guid>http://aligoren.github.io/posts/sys-argv-yerine-click.html</guid><pubDate>Wed, 29 Apr 2015 14:52:27 GMT</pubDate></item><item><title>Python: zip yerine map kullanın</title><link>http://aligoren.github.io/posts/zip-yerine-map.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Birbirine paralel listeler olduğunu düşünelim. Birbirine paralel olarak da çıktılarının olması gerekiyor. Bunu yapabilmek için &lt;code&gt;zip&lt;/code&gt; kullanılabilir.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;zaman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;42.12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;42.28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;42.34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;42.40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;42.45&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;kisiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Ali'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Hakan'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Can'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Gurcan'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;formatli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'{:20} {:.2f}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kisiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zaman&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;Ali&lt;/span&gt;                  &lt;span class="mf"&gt;42.12&lt;/span&gt;
&lt;span class="n"&gt;Hakan&lt;/span&gt;                &lt;span class="mf"&gt;42.28&lt;/span&gt;
&lt;span class="n"&gt;Can&lt;/span&gt;                  &lt;span class="mf"&gt;42.54&lt;/span&gt;
&lt;span class="n"&gt;Gurcan&lt;/span&gt;               &lt;span class="mf"&gt;42.60&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Biraz daha basite indirirsek şöyle yazılabilir.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;zk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;zk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kisiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zaman&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;Ali&lt;/span&gt;                  &lt;span class="mf"&gt;42.12&lt;/span&gt;
&lt;span class="n"&gt;Hakan&lt;/span&gt;                &lt;span class="mf"&gt;42.28&lt;/span&gt;
&lt;span class="n"&gt;Can&lt;/span&gt;                  &lt;span class="mf"&gt;42.54&lt;/span&gt;
&lt;span class="n"&gt;Gurcan&lt;/span&gt;               &lt;span class="mf"&gt;42.60&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bunun yerine ayrıca itertools da kullanılabilir. itertool'sun starmap özelliği kullanılabilir.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatli&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kisiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zaman&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="n"&gt;Ali&lt;/span&gt;                  &lt;span class="mf"&gt;42.12&lt;/span&gt;
&lt;span class="n"&gt;Hakan&lt;/span&gt;                &lt;span class="mf"&gt;42.28&lt;/span&gt;
&lt;span class="n"&gt;Can&lt;/span&gt;                  &lt;span class="mf"&gt;42.54&lt;/span&gt;
&lt;span class="n"&gt;Gurcan&lt;/span&gt;               &lt;span class="mf"&gt;42.60&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bunu şu tarz bir hata alırsanız kullanmanız gerekebilir.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatli&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kisiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zaman&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bu en son hali ise gayet düzgün ve temiz görünüyor. İkili dizileri açmada bunu kullanabiliriz.&lt;/p&gt;
&lt;p&gt;Unutmadan, &lt;code&gt;map&lt;/code&gt; bir eşitlikten fazlasını alabilir. Bundan sonra &lt;code&gt;zip&lt;/code&gt; kullanmanıza gerek yok.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatli&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kisiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zaman&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;Ali&lt;/span&gt;                  &lt;span class="mf"&gt;42.12&lt;/span&gt;
&lt;span class="n"&gt;Hakan&lt;/span&gt;                &lt;span class="mf"&gt;42.28&lt;/span&gt;
&lt;span class="n"&gt;Can&lt;/span&gt;                  &lt;span class="mf"&gt;42.54&lt;/span&gt;
&lt;span class="n"&gt;Gurcan&lt;/span&gt;               &lt;span class="mf"&gt;42.60&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>liste</category><category>map</category><category>programlama</category><category>python</category><category>zip</category><guid>http://aligoren.github.io/posts/zip-yerine-map.html</guid><pubDate>Tue, 28 Apr 2015 21:23:42 GMT</pubDate></item><item><title>syspy Windows Sistem Bilgi Kütüphanesi</title><link>http://aligoren.github.io/posts/syspy-windows-python.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Not: Yazı Sonunda Paylaşılan Python Hosted Linki Doxygen ile Hazırlanmıştır. Class Diagramları ve Açıklamaları Görebilirsiniz.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python ile windows sistem bilgilerini görüntülemek için win32 ya da psutil kütüphanelerinin kurulmuş olması gerekmekte. Ancak bunlarla dahi tam görüntülenemez. Aslında görüntülenir ama sürekli bir uğraş vermek zorunda kalırsınız.&lt;/p&gt;
&lt;p&gt;Sürekli bir iterasyon işlemi şart olur. Can sıkıntısına biraz uğraşayım dedim ve sonunda &lt;a href="https://pypi.python.org/pypi/syspy"&gt;PyPi&lt;/a&gt; üzerinde paylaşabileceğim ekstra bir kütüphane ortaya çıktı.&lt;/p&gt;
&lt;p&gt;Aslında benim işimi görüyor. Windows kullandığım vakitlerde lazım olan bilgileri almamı sağlıyor. &lt;/p&gt;&lt;p&gt;&lt;a href="http://aligoren.github.io/posts/syspy-windows-python.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>programlama</category><category>psutil</category><category>python</category><category>sys</category><category>windows</category><guid>http://aligoren.github.io/posts/syspy-windows-python.html</guid><pubDate>Sun, 26 Apr 2015 21:08:20 GMT</pubDate></item><item><title>Python Name Parser</title><link>http://aligoren.github.io/posts/name-parser.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Name Parser, basitleştirilmiş bir isim ayrıştırıcıdır. Girilen ad, soyad kombinasyonunu duruma göre ayıklar.&lt;/p&gt;
&lt;p&gt;Çıkt formatı şu örneğe göre iki türlüdür.&lt;/p&gt;
&lt;table border="1" style="background-color:#FFFFFF;border-collapse:collapse;border:1px solid #000000;color:#000000;width:100%" cellpadding="3" cellspacing="4"&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;Surname&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Ali&lt;/td&gt;
        &lt;td&gt;Opcode&lt;/td&gt;
        &lt;td&gt;GOREN&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Burada 2 adet Name ve 1 adet Surname çıktısı var. Soyadın tek olmadığı durumlar var. Örneğin evlilik gibi durumlar. Maalesef bunu algılayabilmek için bir soyadı ve isim listesi gerekmekte.&lt;/p&gt;
&lt;h2&gt;Kullanım:&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;name&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NameParser&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Ali Opcode GOREN'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bu şekilde bir kullanım yukarıdaki tablonun çıktısını verecektir. Aslında çıktı formatı şöyle oluyor :)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ali&lt;/span&gt;
&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Opcode&lt;/span&gt;
&lt;span class="n"&gt;Surname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOREN&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Kullanımı görüldüğü gibi çok basittir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Github Linki: &lt;/strong&gt; &lt;a href="https://github.com/aligoren/NameParser"&gt;Name Parser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PyPi Linki: &lt;/strong&gt; &lt;a href="https://pypi.python.org/pypi/ParseNames"&gt;Name Parser&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>name</category><category>name parsing</category><category>parser</category><category>programlama</category><category>python</category><guid>http://aligoren.github.io/posts/name-parser.html</guid><pubDate>Thu, 23 Apr 2015 22:02:57 GMT</pubDate></item><item><title>Python Logging Library</title><link>http://aligoren.github.io/posts/python-logging-library.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;h2&gt;Installation:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;python setup.py install&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Usage:&lt;/h2&gt;
&lt;p&gt;Using is simple. There is a sample code below&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;handan&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LogSaver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;handan&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;logMachine&lt;/span&gt;

&lt;span class="nd"&gt;@logMachine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LogSaver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'This is tests the WARN logging call'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;You can also look &lt;strong&gt;test.py&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Github Repository Link:&lt;/strong&gt; &lt;a href="https://github.com/aligoren/handan"&gt;handan&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What's Handan?&lt;/h2&gt;
&lt;p&gt;Handan is a &lt;a href="http://www.idefix.com/kitap/handan-halide-edib-adivar/tanim.asp?sid=D6ANJ7OKH0208OYQGXWM"&gt;book&lt;/a&gt;. Also my ex girlfriend's name.&lt;/p&gt;&lt;/div&gt;</description><category>library</category><category>logger</category><category>logging</category><category>programlama</category><category>python</category><guid>http://aligoren.github.io/posts/python-logging-library.html</guid><pubDate>Wed, 22 Apr 2015 23:12:09 GMT</pubDate></item><item><title>Kolay Yoldan Flask Framework</title><link>http://aligoren.github.io/posts/kolay-yoldan-flask.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;Flask framework python ile yazılmış genişletilebilir br microframework olarak da tanımlanabilir. Ancak yaptıklarına baktığınızda pek de mikro olmadığını görebilirsiniz.&lt;/p&gt;
&lt;p&gt;Benim gibi django'yu, rails'i karmaşık bulanlar için Flask framework mükemmeldir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flask Framework Kurulumu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flask framework'ü kurmak için konsoldan şu komutu vermeniz yeterlidir.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install Flask&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Bu adımdan sonra artık Flask kurulmuş olmalı. Eğer burada bir sorun yaşıyorsanız hatalara bakıp o hataları gidermeye çalışın.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Olası Hatalar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows ile kurulum yapıyorsanız yönetici izni gerekebilir. Linux için bahsetme gereği duymadım pek çünkü zaten Linux ile kurarken sudo komutunu girmeniz gerektiğini bildiğinizi varsayıyorum. &lt;/p&gt;&lt;p&gt;&lt;a href="http://aligoren.github.io/posts/kolay-yoldan-flask.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>flask</category><category>framework</category><category>programlama</category><category>python</category><guid>http://aligoren.github.io/posts/kolay-yoldan-flask.html</guid><pubDate>Sun, 19 Apr 2015 10:22:36 GMT</pubDate></item><item><title>Hanoi Kuleleri Algoritması</title><link>http://aligoren.github.io/posts/hanoi-tower-algorithm.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Hanoi Kuleleri&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hanoi kuleleri, Fransız matematikçi, &lt;a href="http://en.wikipedia.org/wiki/%C3%89douard_Lucas"&gt;Edouard Lucas&lt;/a&gt; tarafından önerilen bir çözüm yöntemidir. A,B ve C gibi dik konumda yerleştirilmiş üç çubuk ve N kadar disk içermektedir. İşleyiş şöyledir:&lt;/p&gt;
&lt;p&gt;Başlangıçta diskler, üstteki her diskin çapı daha büyük olmak şartıyla A çubuğuna yerleştirilir. Her seferinde sadece bir diskin hareketine izin verildiğinde, büyük disk, küçük diskin üzerine yerleştirilmeden, disklerin C çubuğuna taşınması gerekmektedir.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Towers of Hanoi" src="http://aligoren.github.io/galleries/towers_of_hanoi.png"&gt;&lt;/p&gt;
&lt;p&gt;Hanoi problemi, problem alt problemlere parçalanarak çözülebilir. Problemde N kadar disk olduğunu varsayarsak recursive şekilde bir çözüm şu şekilde olabilir: &lt;/p&gt;&lt;p&gt;&lt;a href="http://aligoren.github.io/posts/hanoi-tower-algorithm.html"&gt;Devamını oku…&lt;/a&gt; (2 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>algoritma</category><category>matematik</category><category>python</category><guid>http://aligoren.github.io/posts/hanoi-tower-algorithm.html</guid><pubDate>Tue, 14 Apr 2015 08:40:26 GMT</pubDate></item><item><title>Hamming Sayıları</title><link>http://aligoren.github.io/posts/hamming-numbers.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Hamming Sayıları&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hamming sayıları, 2,3 ve 5'ten başka diğer asal bölene sahip olmaya dizilerdir. Örnek verecek olursak hamming dizisi şöyledir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;İlk 60 Hamming Sayısı:&lt;/strong&gt; 2 3 4 5 6 8 9 10 12 15 16 18 20 24 25 27 30 32 36 40 45 48 50 54 60... şeklinde gider.&lt;/p&gt;
&lt;p&gt;Sıradaki sayının bulunması üç farklı durumdan oluşmakta. Sayı 2'ye bölünebiliyorsa bir sonraki aşamada 2,3 ve 5 dışında böleni olmayacak.&lt;/p&gt;
&lt;p&gt;Örneğin şöyle izah edilebilir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hamming_numbers.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_hamming_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bu sayede artık var olan sayı elimizdeki dizideki sayılardan birisi durumunda. Örneğin &lt;code&gt;60/2&lt;/code&gt; sonuç olarak 30 veriyor. Diziye baktığımızda 30'dan büyük ilk sayımız 32. Buna göre &lt;code&gt;2*32=64&lt;/code&gt; olmakta. Yani 60'tan sonra sayı 2'ye bölünebiliyorsa bu da &lt;code&gt;2*32=64&lt;/code&gt; olacaktır. Bu durum 3 ve 5 için de yine aynı şekilde anlaşılmaktadır.&lt;/p&gt;&lt;p&gt;&lt;a href="http://aligoren.github.io/posts/hamming-numbers.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>algoritma</category><category>matematik</category><category>python</category><guid>http://aligoren.github.io/posts/hamming-numbers.html</guid><pubDate>Mon, 13 Apr 2015 13:16:59 GMT</pubDate></item><item><title>E Sayısının Hesaplanması</title><link>http://aligoren.github.io/posts/euler-number-python.html</link><dc:creator>Ali</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;E Sayısını Tanıyalım&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;E sayısı ünlü bir irrasyonel sayıdır ve matematiğin en önemli sayılarındandır. 
E sayısı, ilk olarak İskoç Matematikçi &lt;strong&gt;John Napier&lt;/strong&gt; tarafından ortaya atılmıştır. Napier, E sayısını 1618 yılında yayınladığı logaritmalar kitabının
ekinde yayınlamıştır. Esasen dolaylı olarak bir değinme olmuş. E sayısının keşfi ise kitabın yayınlandığı tarihten çok daha sonraları gerçekleşmiş.
&lt;strong&gt;Jakob Bernoulli&lt;/strong&gt; 1683 yılında birleşik faiz problemini incelerken e sayıını keşfetmiş. Bu öyle bir sayı ki bir sürü kişi uğraşmış ama bu sayıya adını
Leonhard Euler vermiştir. E sayısı adını 1731 yılında almıştır. Euler sayısı, "&lt;em&gt;Oiler&lt;/em&gt;" olarak telafuz ediliyormuş.&lt;/p&gt;
&lt;p&gt;E sayısı aynı zamanda Doğal Logaritmanın da tabanını oluşturur. E sayısı ilginç noktalarda karşınıza çıkabileceği için öğrenmeye değer diye düşünüyorum.&lt;/p&gt;
&lt;p&gt;Bu kadar vikipedia yeterli sanırım. &lt;/p&gt;&lt;p&gt;&lt;a href="http://aligoren.github.io/posts/euler-number-python.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>algoritma</category><category>matematik</category><category>python</category><guid>http://aligoren.github.io/posts/euler-number-python.html</guid><pubDate>Sun, 12 Apr 2015 13:02:09 GMT</pubDate></item></channel></rss>